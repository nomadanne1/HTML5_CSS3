1. 웹 퍼블리싱이란?

 - 웹 퍼블리셔의 역할 : HTML(구조) / CSS

2. 웹과 인터넷의 차이? 관계?
 
 - 인터넷은 웹이다? 인터넷 == 웹 x
 - 인터넷은 인터 네트워크 기술 중에 하나이다.
    : 클라이언트(요청) << 표준규약 (FTP, SMTP, TELNET, WWWW...) >> 서버(제공)  

3. WWWW(웹)의 탄생 배경 

 - Berners-Lee (Hypertext project 제안)
 - Mark Andereessen (Mosaic: later Netscape)

4. 웹문서와 웹서버의 이해

 - 웹서버 > 웹문서(홈디렉토리/wiki/: 특정디렉토리)
 - Wep과 HTTP 
   1. http://en.wikipedia.org/wiki/CERN 
   2. REQUEST- GET요청 
   3. >> 웹서버는 홈디렉토리에서 CERN 찾음
   4. RESPONSE

5. 웹 문서 만들어 보기

6. Markup 언어

 - 문서 편집과 콘텐츠 구분자의 필요성: HyperText, Markup
 - 태그의 기호 (< >)가 마크업 기호로 적합한 이유
 - Markup 언어란 문서의 콘텐츠를 구분하기 위한 태그 집합
 
7. HyperText

 - HTML(Hyper Text Markup Language) cf.hyper: 저 건너~
 - HTML은 문서의 구조를 만들기 위한 태그 + HyperText를 위한 태그를 포함

8. HTML파일의 기본구조: 규칙

 <html>
   <head>: 브라우저 화면에 보여줘야할 내용에 대한 설정
      <title> 문저 제목 </title>
   </head>
   <body>: 브라우저 화면에 보여줄 내용
      <a href="">HTML</a>이란
      HyperText Markup Language
   </body>
 </html>

 9. DOCTYPE과 W3C

  - 사용하지 않을 태그에 대한 호환성을 지정하기 위한 Document Type
  - 랜더링 방식의 호환성 문제 발생
  - 다양한 브라우저의 경쟁 구도로 인한 독자적인 태그들
   => 해결 방안: 웹 표준기구 W3C 탄생
     *W3C의 역할
      1. Draft
      2. Working Draft
      3. Candidate Recommendation
      4. Recommendation

  > 사용하지 않을 태그에 대한 호환성을 지정하기 위한 Document Type 
    - HTML DTD: Document Type Definition의 종류
    - strict.dtd, loose.dtd, frameset.dtd... 
    - 기준 없으면 브라우저 자기 자신만의 방식=> Quirks!!
  
  > 문서 구조의 형식 <!DOCTYPE html> ( 표준방식으로 html 출력해주세용~ )

10. 실습환경 준비하기
 
 - Visual Studio Code
 - Live Server

11. PC 웹과 모바일 웹

 - 어떤 웹을 준비할 것인가? >> 모바일용 웹과 PC용 웹의 양분화
 - 모바일과 PC 사이의 다양한 장치들 >> 다양한 장치를 위한 UI 구현의 문제
 - Mobile First와 반응형 웹
 - PC웹의 필요성

12. 실습을 위한 파일 구조 생성하기

 - 파일 구조 (문서들의 연결 관계 고려)

13. 상대경로와 절대경로

 - Navigation을 위한 링크 추가
 
 1.   / : 절대경로 (root) > 홈디렉터리 기준 login.html
 2.  ./ : 현재 있는 디렉토리 
 3. ../ : 현재 있는 디렉토리의 상위 디렉토리

 > 상대 경로 사용하는 것이 좋음. 
 > 절대 경로는 경로가 달라질 경우 수정해야할 것이 많다.
14. SGML 그리고 HTML과의 관계

 - 태그 사용방법에 규칙이 없다?
 - 페이지 간의 이동을 위한 하이퍼링크 작성

[ General Markup 언어의 필요성 ]

 - 데이터를 저장하거나 전달하기 위한 마크업
 - 1960년대 IBM에서 범용저긍로 사용할 수 있는 마크업 언어를 만듦
 - 문서 타입(형식)을 정의하는 언어인 SGML의 문제점

15. 시멘틱 웹과 XML 그리고 XHTML과의 관계

 > HTML 문서의 변화
   1. 시맨틱을 지원하는 문서로의 변화- W3C (문서를 좀더 문서답게!)
   2. 프로그래밍 플랫폼으로의 변화- WHATWG

 > 시맨틱을 지원하는 웹의 모양 >> 데이터 자동 추출 문서로서의 변화 
   - 기본 웹의 구조: 사용자, HTML(정보표현), (웹정보)자원
   - 시멘틱웹의 구조: 에이전트, 웹지식 자원, 온톨로지(지식표현)

 > 웹 문서 변화의 필요성
   - 태그를 사용자가 정의할 수 있는 마크업 언어의 필요성

 > Time Berners Lee가 바라보는 미래 웹의 변화
   - 데이터 자동 추출 문서로서의 변화
  
 > XML (eXensible Markup Language)
   - 문서 타입(형식)을 정의하는 새로운 언어인 XML

16. HTML의 버전과 HTML5의 탄생배경

  > XHTML과 HTML의 버전의 역사
  > HTML의 변천사
  > WHATWG (Web Hypertext Application Technology Working Group)
  > 웹 문서 구성의 변화
    - 프로그래밍 플랫폼으로서의 변화가 요구되어 오던 웹 문서

17. 콘텐츠 작성하기
 
  > Web Developer- Disable All Styles

18. 콘텐츠 블록잡기

  [ HTML 문서의 기본 구조 ]

  > 제목 태그- 여섯개의 레벨을 가지는 제목 태그 (h1, h2, ... h6)
  > 목록 태그- 목록을 위한 태그 <ol>, <ul>, <dl>
  > 입력 폼 태그- 입력 폼을 위한 태그 <form>

19. 콘텐츠 블록잡기2

20. 문서의 아웃라인 잡기
  - 크롬 웹스토어  HTML5 Outliner 다운

21. 아웃라인 영역 만들기
  - 콘텐츠의 일반전인 영역의 구성 ( header, title, main, aside, footer ... )

22. 영역을 위한 시멘틱 태그들 

  > 시멘틱 태그가 없던 시절
    - HTML4까지는 다음과 같은 필수 구조를 설명하는 태그가 없었다.
    - ( header, title, main, aside, footer ... )

  > 문서의 내용을 식별하는데 표준방식이 없었던 시절 제각각 필수 구성을...
    - 구성을 식별하기 위해 각자 나름대로의 이름을 부여하였다.
    - 예) <div id="header"></div>, <div id="head"></div> ...

  > 시멘틱 태그들
    - 콘텐츠를 구분해줄 수 있게 의미가 살아있는 태그
    - 사람들이 가장 많이 사용하고 가장 많이 추천하는 이름으로 표준화가 진행됨
    - <div id="header" /> => <header />, <div id="main" /> => <main />

  > 문서의 내용을 식별하는데 표준방식이 생겼다
    - 표준화된 방식으로 모두 동일한 이름을 부여 

23. HTML5의 섹션태그
  - 아웃라인의 계층화
  - secㅊtion 태그를 이용해 아웃라인을 잡는 새로운 방식

24. 시멘틱 섹션 태그
  
  > 섹션 태그들
    - 콘텐츠의 아웃라인을 쉽게 만들어주는 태그 

  > section 태그를 이용해 아웃라인을 잡는 새로운 방식
    - section> article, aside, nav ... 의미를 부여하는 섹션
      1. nav: 목록중에서 하이퍼링크만을 갖고있는 것들
      2. aside: header, main, footer도 아닌것들
      3. article: 내용이 있는것들..??

25. 블록 태그와 인라인 태그

  > 블록 태그들
    - 지금까지 설명한 태그들은 모두 콘텐츠의 영역(블록)을 위한 태그들이다.
      1. 섹션: section, nav, aside, article
      2. 블록: div, header, main, footer
      3. 제목: h, hgroup
      4. 목록: ul, ol, dl
      5. 문장: p
      6. 표: table
      7. 입력폼: form

  > 블록 태그의 기본 스타일의 이용
    - <br> 태그 없으면 오른쪽으로 쭉 나열
    - <div> 태그로 감싸면 자기만의 height은 content의 높이, width는 100% 영역을 가짐
  
  > 종류에 따른 블록 스타일의 차이점
    - 블록스타일: margin x
    - 제목 스타일 블록: margin o
    - 목록 스타일 블록: margin o (+들여써짐)
  
    * 공통점: 너비를 꽉채우고 한층을 혼자쓴다. 너비를 높이 조절 가능
      but 너비를 줄였다고해도 밑에있는애가 위로 올라가는일은 없음

 26. 인라인 태그의 종류

  > 블록 태그에 포함되는 인라인 태그들
    - 인라인 태그 span, a, b, u, font, string, ...
    - (한줄에서 content를 감싸기만 할 뿐 영역을 가지지는 않는다.)
    - cf. img, input... : 자기 스스로가 content

  > 인라인 요소들 
    - MDN 참고



 

